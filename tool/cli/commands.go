// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// unnamed API: CLI Commands
//
// Command:
// $ goagen
// --design=github.com/Microkubes/authorization-server/design
// --out=$(GOPATH)/src/github.com/Microkubes/authorization-server
// --version=v1.2.0-dirty

package cli

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/Microkubes/authorization-server/client"
	"github.com/keitaroinc/goa"
	goaclient "github.com/keitaroinc/goa/client"
	uuid "github.com/keitaroinc/goa/uuid"
	"github.com/spf13/cobra"
	"log"
	"os"
	"path"
	"strconv"
	"strings"
	"time"
)

type (
	// ConfirmAuthorizationAuthuiCommand is the command line data structure for the confirmAuthorization action of authUI
	ConfirmAuthorizationAuthuiCommand struct {
		// Is the authorization confirmed.
		Confirmed   string
		PrettyPrint bool
	}

	// PromptAuthorizationAuthuiCommand is the command line data structure for the promptAuthorization action of authUI
	PromptAuthorizationAuthuiCommand struct {
		PrettyPrint bool
	}

	// ShowLoginLoginCommand is the command line data structure for the showLogin action of login
	ShowLoginLoginCommand struct {
		PrettyPrint bool
	}

	// AuthorizeOauth2ProviderCommand is the command line data structure for the authorize action of oauth2_provider
	AuthorizeOauth2ProviderCommand struct {
		// The client identifier
		ClientID string
		// Redirection endpoint
		RedirectURI string
		// Value MUST be set to "code"
		ResponseType string
		// The scope of the access request
		Scope string
		// An opaque value used by the client to maintain state between the request and callback
		State       string
		PrettyPrint bool
	}

	// GetTokenOauth2ProviderCommand is the command line data structure for the get_token action of oauth2_provider
	GetTokenOauth2ProviderCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// DownloadCommand is the command line data structure for the download command.
	DownloadCommand struct {
		// OutFile is the path to the download output file.
		OutFile string
	}
)

// RegisterCommands registers the resource action CLI commands.
func RegisterCommands(app *cobra.Command, c *client.Client) {
	var command, sub *cobra.Command
	command = &cobra.Command{
		Use:   "authorize",
		Short: `Authorize OAuth2 client`,
	}
	tmp1 := new(AuthorizeOauth2ProviderCommand)
	sub = &cobra.Command{
		Use:   `oauth2-provider ["/oauth2/authorize"]`,
		Short: `This resource implements the OAuth2 authorization code flow`,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp1.Run(c, args) },
	}
	tmp1.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp1.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "confirm-authorization",
		Short: `Confirm the authorization of the client`,
	}
	tmp2 := new(ConfirmAuthorizationAuthuiCommand)
	sub = &cobra.Command{
		Use:   `authui ["/auth/confirm-authorization"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp2.Run(c, args) },
	}
	tmp2.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp2.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-token",
		Short: `Get access token from authorization code or refresh token`,
	}
	tmp3 := new(GetTokenOauth2ProviderCommand)
	sub = &cobra.Command{
		Use:   `oauth2-provider ["/oauth2/token"]`,
		Short: `This resource implements the OAuth2 authorization code flow`,
		Long: `This resource implements the OAuth2 authorization code flow

Payload example:

{
   "code": "Delectus aut libero nesciunt veniam reiciendis.",
   "grant_type": "refresh_token",
   "redirect_uri": "Ipsum et aut.",
   "refresh_token": "Et qui quia sed odio sint.",
   "scope": "Iste laborum nostrum quidem sequi dolor."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp3.Run(c, args) },
	}
	tmp3.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp3.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "prompt-authorization",
		Short: `Prompt the user for client authorization`,
	}
	tmp4 := new(PromptAuthorizationAuthuiCommand)
	sub = &cobra.Command{
		Use:   `authui ["/auth/authorize-client"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp4.Run(c, args) },
	}
	tmp4.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp4.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "show-login",
		Short: `Shows a login screen`,
	}
	tmp5 := new(ShowLoginLoginCommand)
	sub = &cobra.Command{
		Use:   `login ["/auth/login"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp5.Run(c, args) },
	}
	tmp5.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp5.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)

	dl := new(DownloadCommand)
	dlc := &cobra.Command{
		Use:   "download [PATH]",
		Short: "Download file with given path",
		RunE: func(cmd *cobra.Command, args []string) error {
			return dl.Run(c, args)
		},
	}
	dlc.Flags().StringVar(&dl.OutFile, "out", "", "Output file")
	app.AddCommand(dlc)
}

func intFlagVal(name string, parsed int) *int {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func float64FlagVal(name string, parsed float64) *float64 {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func boolFlagVal(name string, parsed bool) *bool {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func stringFlagVal(name string, parsed string) *string {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func hasFlag(name string) bool {
	for _, arg := range os.Args[1:] {
		if strings.HasPrefix(arg, "--"+name) {
			return true
		}
	}
	return false
}

func jsonVal(val string) (*interface{}, error) {
	var t interface{}
	err := json.Unmarshal([]byte(val), &t)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func jsonArray(ins []string) ([]interface{}, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []interface{}
	for _, id := range ins {
		val, err := jsonVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, val)
	}
	return vals, nil
}

func timeVal(val string) (*time.Time, error) {
	t, err := time.Parse(time.RFC3339, val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func timeArray(ins []string) ([]time.Time, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []time.Time
	for _, id := range ins {
		val, err := timeVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func uuidVal(val string) (*uuid.UUID, error) {
	t, err := uuid.FromString(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func uuidArray(ins []string) ([]uuid.UUID, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []uuid.UUID
	for _, id := range ins {
		val, err := uuidVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func float64Val(val string) (*float64, error) {
	t, err := strconv.ParseFloat(val, 64)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func float64Array(ins []string) ([]float64, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []float64
	for _, id := range ins {
		val, err := float64Val(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func boolVal(val string) (*bool, error) {
	t, err := strconv.ParseBool(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func boolArray(ins []string) ([]bool, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []bool
	for _, id := range ins {
		val, err := boolVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

// Run downloads files with given paths.
func (cmd *DownloadCommand) Run(c *client.Client, args []string) error {
	var (
		fnf func(context.Context, string) (int64, error)
		fnd func(context.Context, string, string) (int64, error)

		rpath   = args[0]
		outfile = cmd.OutFile
		logger  = goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
		ctx     = goa.WithLogger(context.Background(), logger)
		err     error
	)

	if rpath[0] != '/' {
		rpath = "/" + rpath
	}
	if strings.HasPrefix(rpath, "/auth/css/") {
		fnd = c.DownloadCSS
		rpath = rpath[10:]
		if outfile == "" {
			_, outfile = path.Split(rpath)
		}
		goto found
	}
	if strings.HasPrefix(rpath, "/auth/js/") {
		fnd = c.DownloadJs
		rpath = rpath[9:]
		if outfile == "" {
			_, outfile = path.Split(rpath)
		}
		goto found
	}
	return fmt.Errorf("don't know how to download %s", rpath)
found:
	ctx = goa.WithLogContext(ctx, "file", outfile)
	if fnf != nil {
		_, err = fnf(ctx, outfile)
	} else {
		_, err = fnd(ctx, rpath, outfile)
	}
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	return nil
}

// Run makes the HTTP request corresponding to the ConfirmAuthorizationAuthuiCommand command.
func (cmd *ConfirmAuthorizationAuthuiCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/auth/confirm-authorization"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	var tmp6 *bool
	if cmd.Confirmed != "" {
		var err error
		tmp6, err = boolVal(cmd.Confirmed)
		if err != nil {
			goa.LogError(ctx, "failed to parse flag into *bool value", "flag", "--confirmed", "err", err)
			return err
		}
	}
	resp, err := c.ConfirmAuthorizationAuthUI(ctx, path, tmp6)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ConfirmAuthorizationAuthuiCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var confirmed string
	cc.Flags().StringVar(&cmd.Confirmed, "confirmed", confirmed, `Is the authorization confirmed.`)
}

// Run makes the HTTP request corresponding to the PromptAuthorizationAuthuiCommand command.
func (cmd *PromptAuthorizationAuthuiCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/auth/authorize-client"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.PromptAuthorizationAuthUI(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *PromptAuthorizationAuthuiCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ShowLoginLoginCommand command.
func (cmd *ShowLoginLoginCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/auth/login"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowLoginLogin(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowLoginLoginCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the AuthorizeOauth2ProviderCommand command.
func (cmd *AuthorizeOauth2ProviderCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/oauth2/authorize"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AuthorizeOauth2Provider(ctx, path, cmd.ClientID, cmd.ResponseType, stringFlagVal("redirect_uri", cmd.RedirectURI), stringFlagVal("scope", cmd.Scope), stringFlagVal("state", cmd.State))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AuthorizeOauth2ProviderCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var clientID string
	cc.Flags().StringVar(&cmd.ClientID, "client_id", clientID, `The client identifier`)
	var redirectURI string
	cc.Flags().StringVar(&cmd.RedirectURI, "redirect_uri", redirectURI, `Redirection endpoint`)
	var responseType string
	cc.Flags().StringVar(&cmd.ResponseType, "response_type", responseType, `Value MUST be set to "code"`)
	var scope string
	cc.Flags().StringVar(&cmd.Scope, "scope", scope, `The scope of the access request`)
	var state string
	cc.Flags().StringVar(&cmd.State, "state", state, `An opaque value used by the client to maintain state between the request and callback`)
}

// Run makes the HTTP request corresponding to the GetTokenOauth2ProviderCommand command.
func (cmd *GetTokenOauth2ProviderCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/oauth2/token"
	}
	var payload client.TokenPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetTokenOauth2Provider(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetTokenOauth2ProviderCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}
